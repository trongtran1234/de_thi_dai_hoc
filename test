1. Implementation	
	SVA checker is bind to arbiter DUT in file arbiter_tb_top.sv (UVM environment) as below:

We cannot verify with the asynchronous signals (P0…3_REQ, P0…3_ACK), We will check synchronous signals (P0…3_REQ_sync, P0…3_ACK_sync), Please check the "How to verify" sheet.
The synchronous circuit will be verified independently


2. Checker with SVA	
	
	Item 1:  The requestors so that requests from higher priority requestors are granted before requests from lower priority requestors
	Assump that priority: P0 -> P1 -> P2 -> P3 -> P0 -> P1….
	The waveform


SVA code


Item 2: The arbitration scheme must implement a form of first-come-first-served selection in addition to priority selection. This function is to reduce the wait time
P0 is granted. If "P0_REQ_sync is de-active" and "P1_REQ_sync is not active" and "P2_REQ_sync active", P2_ACK_sync will be granted
P0 is granted. If "P0_REQ_sync is de-active" and "P1_REQ_sync is not active" and "P2_REQ_sync is not active" and "P3_REQ_sync is active", P3_ACK_sync will be granted
Same as for other requestors.

The waveform


SVA code
P0 is granted. If "P0_REQ is de-active" and "P1_REQ is not active" and "P2_REQ active", P2_ACK will be granted

P0 is granted. If "P0_REQ is de-active" and "P1_REQ is not active" and "P2_REQ is not active" and "P3_REQ is active", P3_ACK will be granted

Item 3: Verifying only 1 requestor granted at one time 
arbiter just grant for only 1 requestor at one time. It means that {P0_ACK_sync,  P1_ACK_sync, P2_ACK_sync, P3_ACK_sync) belong to {4'b0001; 4'b0010; 4'b0100; 4'b1000) 
or equal 4'b0000 when reset or no P0…3_REQ active

The waveform

Item 4: Check X/Z propagate or not
No X/Z propagate in P0…3_ACK_sync signals when no reset

SVA code


Item 5: Check the operation of reset signal
if ARB_RST = 1, all P0…3_ACK_sync signals will equal 4'b0000

SVA code
