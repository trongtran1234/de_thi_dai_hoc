module sva (
   ARB_RST,
   ARB_CLK,
   P0_CLK,
   P1_CLK,
   P2_CLK,
   P3_CLK,
   P0_REQ_sync,
   P1_REQ_sync,
   P2_REQ_sync,
   P3_REQ_sync,
   P0_ACK_sync,
   P1_ACK_sync,
   P2_ACK_sync,
   P3_ACK_sync
   );

   input ARB_RST;
   input ARB_CLK;
   input P0_CLK;
   input P1_CLK;
   input P2_CLK;
   input P3_CLK;
   input P0_REQ_sync;
   input P1_REQ_sync;
   input P2_REQ_sync;
   input P3_REQ_sync;
   input P0_ACK_sync;
   input P1_ACK_sync;
   input P2_ACK_sync;
   input P3_ACK_sync;

   wire [3:0] P_REQ_sync;
   wire [3:0] P_ACK_sync;
   
   assign P_REQ_sync = {P3_REQ_sync, P2_REQ_sync, P1_REQ_sync, P0_REQ_sync};
   assign P_ACK_sync = {P3_ACK_sync, P2_ACK_sync, P1_ACK_sync, P0_ACK_sync};

//// Test asynchronous circuit

//// Test the priority
property prior_chk_P0_P1;
   @(posedge ARB_CLK) disable iff (ARB_RST) (P0_ACK_sync == 1) && $fell(P0_REQ_sync) |=>  P1_REQ_sync |=>
   $rose(P1_ACK_sync);
endproperty
 
sva_prior_chk_P0_P1: assert property (prior_chk_P0_P1);

property prior_chk_P1_P2;
   @(posedge ARB_CLK) disable iff (ARB_RST) (P1_ACK_sync == 1) && $fell(P1_REQ_sync) |=>  P2_REQ_sync |=> 
   $rose(P2_ACK_sync);
endproperty

sva_prior_chk_P1_P2: assert property (prior_chk_P1_P2);

property prior_chk_P2_P3;
   @(posedge ARB_CLK) disable iff (ARB_RST) (P2_ACK_sync == 1) && $fell(P2_REQ_sync) |=>  P3_REQ_sync |=> 
   $rose(P3_ACK_sync);
endproperty

sva_prior_chk_P2_P3: assert property (prior_chk_P2_P3);

property prior_chk_P3_P0;
   @(posedge ARB_CLK) disable iff (ARB_RST) (P3_ACK_sync == 1) && $fell(P3_REQ_sync) |=>  P0_REQ_sync |=> 
   $rose(P0_ACK_sync);
endproperty

sva_prior_chk_P3_P0: assert property (prior_chk_P3_P0);

//// X,Z propagate or not
property XZ_propa_chk;
  @(posedge ARB_CLK) ~ARB_RST |-> not $isunknown(P_ACK_sync);
endproperty

sva_XZ_propa_chk: assert property (XZ_propa_chk);


////Check 1 requestor grant at one time
property grant_one_chk;
  @(posedge ARB_CLK) disable iff (ARB_RST) (P_ACK_sync > 0) |-> $onehot(P_ACK_sync);
endproperty
sva_grant_one_chk: assert property (grant_one_chk);

//// Check grant when have the request
property correction_chk;
   @(posedge ARB_CLK) disable iff (ARB_RST) (P_ACK_sync == 4'b0000) |-> (P_REQ_sync > 4'b0000) |=> $onehot(P_ACK_sync);
endproperty

sva_correction_chk: assert property (correction_chk);
  


//// Check first-come-first-served
property chk_P0_P2;
 @(posedge ARB_CLK) disable iff (ARB_RST) (P0_ACK_sync == 1) && $fell(P0_REQ_sync) |=>  (P1_REQ_sync == 0) && P2_REQ_sync |=>
   $rose(P2_ACK_sync);
endproperty

sva_chk_P0_P2: assert property (chk_P0_P2);

property chk_P0_P3;
 @(posedge ARB_CLK) disable iff (ARB_RST) (P0_ACK_sync == 1) && $fell(P0_REQ_sync) |=>  (P1_REQ_sync == 0) && (P2_REQ_sync == 0) && P3_REQ_sync |=>
   $rose(P3_ACK_sync);
endproperty

sva_chk_P0_P3: assert property (chk_P0_P3);

property chk_P1_P3;
 @(posedge ARB_CLK) disable iff (ARB_RST) (P1_ACK_sync == 1) && $fell(P1_REQ_sync) |=>  (P2_REQ_sync == 0) && P3_REQ_sync |=>
   $rose(P3_ACK_sync);
endproperty

sva_chk_P1_P3: assert property (chk_P1_P3);


property chk_P1_P0;
 @(posedge ARB_CLK) disable iff (ARB_RST) (P1_ACK_sync == 1) && $fell(P1_REQ_sync) |=>  (P2_REQ_sync == 0) && (P3_REQ_sync == 0) && P0_REQ_sync |=>
   $rose(P0_ACK_sync);
endproperty

sva_chk_P1_P0: assert property (chk_P1_P0);

property chk_P2_P0;
 @(posedge ARB_CLK) disable iff (ARB_RST) (P2_ACK_sync == 1) && $fell(P2_REQ_sync) |=>  (P3_REQ_sync == 0) && P0_REQ_sync |=>
   $rose(P0_ACK_sync);
endproperty

sva_chk_P2_P0: assert property (chk_P2_P0);

property chk_P2_P1;
 @(posedge ARB_CLK) disable iff (ARB_RST) (P2_ACK_sync == 1) && $fell(P2_REQ_sync) |=>  (P3_REQ_sync == 0) && (P0_REQ_sync == 0) && P1_REQ_sync |=>
   $rose(P1_ACK_sync);
endproperty

sva_chk_P2_P1: assert property (chk_P2_P1);


property chk_P3_P1;
 @(posedge ARB_CLK) disable iff (ARB_RST) (P3_ACK_sync == 1) && $fell(P3_REQ_sync) |=>  (P0_REQ_sync == 0) && P1_REQ_sync |=>
   $rose(P1_ACK_sync);
endproperty

sva_chk_P3_P1: assert property (chk_P3_P1);


property chk_P3_P2;
 @(posedge ARB_CLK) disable iff (ARB_RST) (P3_ACK_sync == 1) && $fell(P3_REQ_sync) |=>  (P0_REQ_sync == 0) && (P1_REQ_sync == 0) && P2_REQ_sync |=>
   $rose(P2_ACK_sync);
endproperty

sva_chk_P3_P2: assert property (chk_P3_P2);

//// Test the oparation of reset signal
property rst_chk;
   @(posedge ARB_CLK) ARB_RST |-> (P_ACK_sync == 4'b0000); 
endproperty

sva_rst_chk: assert property (rst_chk);



endmodule
