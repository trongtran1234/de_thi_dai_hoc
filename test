I attached the UVM environment in the email.		
		
I. Setting clock and reset		
	Before running we will check the file generating clock and reset signals base on the specification	
		+ File: generate_clk_and_reset.v in UVM environment
P0_CLK, P1_CLK, P2_CLK, P3_CLK, ARB_CLK are asynchronous together
It is easy to modify base on the clock specification


II. Create test case	
	The patterns located in folder TM in UVM env.


If we want to run with random test (Random 100 times), we can run: 	
	 ./go_sim.csh RANDOM

	Please  modify TM/tm_uvm_random.v if you want to run with more than 100 times repeatly
	
If we want to run with uvm_create (for some corner cases or specific cases), we can run: 	
	 ./go_sim.csh UVM_CREATE
	In this case, pattern TM/tm_uvm_create.v will be excuted
	
If we want to run with uvm_do_with (for some corner cases or specfic cases), we can run: 	
	 ./go_sim.csh UVM_DO_WITH
	In this case, pattern TM/tm_uvm_do_with.v will be excuted

III. Implement checker		
		
	SVA checker will put into folder : SVA/sva_test.v in UVM environment	
	SVA  will be bind to arbiter in file arbiter_tb_top.sv	
		
		
		
	uvm_driver drives P0…3_REQ signals base on P0…3_CLK to DUT as below:	
I just verify the arbiter with SVA checker.  I don't verify in uvm_monitor/uvm_scoreboard

uvm_monitor is just dump to log file some information as below:


		Actually, We can not judge PASS/FAIL base on above information because P0…3_ACK signals are asynchronous together
		
IV. Limitation		
